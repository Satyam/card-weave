use <RoxySaty.scad>

/* Un solo bloque
difference() {
    // Cubo con marco
    translate([75,75,25]) cube([170, 170, 70], true);
    // Cubo justo al borde
    //translate([75,75,24]) cube([150, 150, 48], true);
    // Base cil√≠ndrica
    // translate([75,75,24]) cylinder(r=80, h=50, center=true);
    translate([0,160,0]) rotate([90,0,0]) linear_extrude(180) Roxy();
    translate([-10,0,0]) rotate([90,0,90]) linear_extrude(180) Saty();
}
*/

/* Rodajas horizontales
for (z=[0:5:50]) difference() {
    translate([75,75,z]) cube([160, 160, 2], true);
    translate([0,157,0]) rotate([90,0,0]) linear_extrude(170) Roxy();
    translate([-7,0,0]) rotate([90,0,90]) linear_extrude(170) Saty();

}
*/

anchoPanel = sqrt(2) * 20;
/* bloque con paneles * /
intersection() {
    translate([75,75,25]) cube([170, 170, 70], true);
    for (x = [-5:20: 155]) {
        for (y= [-5:20:155]) {
            difference() {
                translate([x, y, 25]) rotate([0,0,45]) cube([anchoPanel, 1, 70], true);
                translate([0,160,0]) rotate([90,0,0]) linear_extrude(180) Roxy();
                translate([160,150,0]) rotate([90,0,-90]) linear_extrude(180) Saty();
            }
        }
    }
}
*/
/*
    for (x = [-5:20: 155]) {
        for (y= [-5:20:155]) {
            echo([x, y, 25]);
        }
    }
*/

intersection() {
    translate([75,75,25]) cube([170, 170, 70], true);
    for (p = [
        [-5, -5, 25],
        [-5, 15, 25],
        [-5, 35, 25],
        [-5, 55, 25],
        [-5, 75, 25],
        [-5, 95, 25],
        [-5, 115, 25],
        [-5, 135, 25],
        [-5, 155, 25],
        [15, -5, 25],
        [15, 15, 25],
        [15, 35, 25],
        [15, 55, 25],
        [15, 75, 25],
        [15, 95, 25],
        [15, 115, 25],
        [15, 135, 25],
        [15, 155, 25],
        [35, -5, 25],
        [35, 15, 25],
        [35, 35, 25],
        [35, 55, 25],
        [35, 75, 25],
        [35, 95, 25],
        [35, 115, 25],
        [35, 135, 25],
        [35, 155, 25],
        [55, -5, 25],
        [55, 15, 25],
        [55, 35, 25],
        [55, 55, 25],
        [55, 75, 25],
        [55, 95, 25],
        [55, 115, 25],
        [55, 135, 25],
        [55, 155, 25],
        [75, -5, 25],
        [75, 15, 25],
        [75, 35, 25],
        [75, 55, 25],
        [75, 75, 25],
        [75, 95, 25],
        [75, 115, 25],
        [75, 135, 25],
        [75, 155, 25],
        [95, -5, 25],
        [95, 15, 25],
        [95, 35, 25],
        [95, 55, 25],
        [95, 75, 25],
        [95, 95, 25],
        [95, 115, 25],
        [95, 135, 25],
        [95, 155, 25],
        [115, -5, 25],
        [115, 15, 25],
        [115, 35, 25],
        [115, 55, 25],
        [115, 75, 25],
        [115, 95, 25],
        [115, 115, 25],
        [115, 135, 25],
        [115, 155, 25],
        [135, -5, 25],
        [135, 15, 25],
        [135, 35, 25],
        [135, 55, 25],
        [135, 75, 25],
        [135, 95, 25],
        [135, 115, 25],
        [135, 135, 25],
        [135, 155, 25],
        [155, -5, 25],
        [155, 15, 25],
        [155, 35, 25],
        [155, 55, 25],
        [155, 75, 25],
        [155, 95, 25],
        [155, 115, 25],
        [155, 135, 25],
        [155, 155, 25],
    ]) {
            difference() {
                translate(p) rotate([0,0,45]) cube([anchoPanel, 1, 70], true);
                translate([0,160,0]) rotate([90,0,0]) linear_extrude(180) Roxy();
                translate([160,150,0]) rotate([90,0,-90]) linear_extrude(180) Saty();
        }
    }
}